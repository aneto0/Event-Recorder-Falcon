+StateMachine = {
	Class = StateMachine
	+INITIAL = {
    	Class = ReferenceContainer    	
    	+START = {
    		Class = StateMachineEvent
    		NextState = "IDLE"
			NextStateError = "IDLE"
    		Timeout = 0
			+ChangeToIdleMsg = {
        		Class = Message
        		Destination = EventRecorderApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Idle
        		}
        	}
        	+StartNextStateExecutionMsg = {
        		Class = Message
        		Destination = EventRecorderApp
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
        	}
    	}    	
	}
	+IDLE = {
    	Class = ReferenceContainer
    	+ERROR = {
    		Class = StateMachineEvent
    		NextState = "ERROR"
    		NextStateError = "ERROR"
            Timeout = 0
        }                        
    }   
    +ERROR = {
    	Class = ReferenceContainer
        +RESET = {
    		Class = StateMachineEvent
    		NextState = "IDLE"
    		NextStateError = "IDLE"
            Timeout = 0                                	
        	+StopCurrentStateExecutionMsg = {
        		Class = Message
        		Destination = EventRecorderApp
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
        	}
        	+PrepareChangeToIdleMsg = {
        		Class = Message
        		Destination = EventRecorderApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Idle
        		}
        	}
        	+StartNextStateExecutionMsg = {
        		Class = Message
        		Destination = EventRecorderApp
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
        	}
        }
	}
}
$EventRecorderApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMCRIORead = {
            Class = IOGAM
            InputSignals = {
            	DataOK = {
                    DataSource = CRIOUART
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Packet = {
                    DataSource = CRIOUART
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 15
                }
            }
            OutputSignals = {
            	DataOK = {
                    DataSource = LoggerDataSource
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Packet = {
                    DataSource = LoggerDataSource
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 15
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1  
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }        
        +CRIOUART = {
            Class = CRIOUARTDataSource
            NumberOfBuffers = 1000
            PortName = "/dev/ttyUSB0"
            BaudRate = 115200
            Timeout = 200000
            CPUMask = 8
            Signals = {
            	DataOK = {
            		Type = uint8
                    NumberOfElements = 1
            	}
                Packet = {
                    Type = uint8
                    NumberOfElements = 15
                }
            }
        }        
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {GAMCRIORead }
                }
            }
        }        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
